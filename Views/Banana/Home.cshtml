<link rel="stylesheet" href="~/css/bananaStyle.css">
@model HomeViewModel
@{
    string name = Model.AthleteName;
    bool units = Model.AthleteUnits;
    List<Challenge> challenges = Model.AthleteChallenges;
    BikeTotal bikeTotal = Model.CurrentStats.YTD_Ride_Totals;
    RunTotal runTotal = Model.CurrentStats.YTD_Run_Totals;
    SwimTotal swimTotal = Model.CurrentStats.YTD_Swim_Totals;
    int daysRemaining = Model.DaysRemaining;
}

<nav class="navbar navbar-expand-md navbar-light bg-warning">
    <div class="container">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarTogglerDemo03"
            aria-controls="navbarTogglerDemo03" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <a class="navbar-brand" href="/home">Fit Bananas</a>
        <div class="collapse navbar-collapse" id="navbarTogglerDemo03">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="/home">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/new">New</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/settings">Settings</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/signout">Sign out</a>
                </li>
            </ul>
            <div class="navbar-nav">
                <a href="https://www.strava.com">
                    <img src="/img/api_logo_pwrdBy_strava_horiz_white.svg" height="40" class="d-inline-block align-top">
                </a>
            </div>
        </div>
    </div>
</nav>
<main class="container p-5 mt-5">
    <div class="row m-5">
        <div class="col-auto me-auto">
            <h1>@name's @DateTime.Now.Year Challenges</h1>
        </div>
        <div class="col-auto">
            <h2 id="timeRemaining"></h2>
        </div>
    </div>
    @if (challenges.Count > 0)
    {
        foreach (var challenge in challenges)
        {
            // create variables that will be dependent upon the challenge type and units
            int total, progress, goal;
            string challengeUnits;
            // set total for if the athletes preference is metric units
            if (units)
            {
                if (challenge.ChallengeType == "Elevation Gain")
                {
                    goal = challenge.Goal;
                    challengeUnits = "meters";
                    if(challenge.ActivityType == "Run")
                    {
                        total = runTotal.Elevation_Gain;
                    }
                    else
                    {
                        total = bikeTotal.Elevation_Gain;
                    }
                }
                else
                {
                    // convert goal from meters to kilometers
                    goal = challenge.Goal / 1000;
                    challengeUnits = "kilometers";
                    switch (challenge.ActivityType)
                    {
                        case "Swim":
                            total = swimTotal.Distance;
                            break;
                        case "Bike":
                            total = bikeTotal.Distance;
                            break;
                        default:
                            total = runTotal.Distance;
                            break;
                    }
                    // convert total from meters to kilometers
                    total = total / 1000;
                };
            }
            // set total for if athlete's preference is imperial units
            else
            {
                goal = challenge.GoalToImperial();
                if (challenge.ChallengeType == "Elevation Gain")
                {
                    challengeUnits = "feet";
                    switch (challenge.ActivityType)
                    {
                        case "Run":
                            total = runTotal.ElevationGainToFeet();
                            break;
                        default:
                            total = bikeTotal.ElevationGainToFeet();
                            break;
                    }
                }
                else
                {
                    challengeUnits = "miles";
                    switch (challenge.ActivityType)
                    {
                        case "Swim":
                            total = swimTotal.DistanceToMiles();
                            break;
                        case "Bike":
                            total = bikeTotal.DistanceToMiles();
                            break;
                        default:
                            total = runTotal.DistanceToMiles();
                            break;
                    }
                };
            };
            // set progress for progress bar
            progress = Math.Min(100, (int)((float)total / goal * 100));


            int averageTotal = total / DateTime.Now.DayOfYear;
            // calculate average remaining distance to complete
            int averageToComplete = Math.Max(0, (goal - total) / daysRemaining);
            int onPaceTotal = (int)((float)goal / 365 * DateTime.Now.DayOfYear);
            int diffTotal = onPaceTotal - total;
            string color, onPace;
            if (diffTotal <= 0)
            {
                color = "success";
                onPace = "ahead";
            }
            else
            {
                color = "danger";
                onPace = "behind";
            }
            <div class="row mb-4">
                <div class="col-md-8 card bg-secondary text-light">
                    <h4>@challenge.Title</h4>
                    <p class="text-center mb-0">@String.Format("{0:n0}", total) of @String.Format("{0:n0}", goal) @challengeUnits</p>
                    <div class="progress mb-3">
                        <div class="progress-bar progress-bar-striped bg-@color" role="progressbar"
                            style='width: @($"{progress}%")' aria-valuenow='@($"{progress}%")' aria-valuemin="0"
                            aria-valuemax="100"></div>
                    </div>
                    <p class="mb-1">@String.Format("{0:n0}", Math.Abs(diffTotal)) @challengeUnits @onPace schedule!</p>
                    <p class="mb-1">Average Daily @challenge.ChallengeType: @String.Format("{0:n0}", averageTotal) @challengeUnits</p>
                    <p>Average Daliy @challenge.ChallengeType to completion: @String.Format("{0:n0}", averageToComplete) @challengeUnits</p>
                </div>
                <div class="col d-none d-md-block">
                    <img class="img-fluid" src="~/img/challengeImages/@challenge.ImageFileName" alt="challenge image">
                </div>
            </div>
        }
    }
    else
    {
        <p class="text-center display-4 mb-3">You don't have any challenges yet!</p>
        <div class="row justify-content-center">
            <div class="col-auto">
                <a href="/new" class="btn btn-lg btn-warning">Add a Challenge</a>
            </div>
        </div>
    }
</main>
<script src="~/js/timeRemaining.js"></script>
